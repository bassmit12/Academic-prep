# Generated from HTML.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,12,94,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,
        5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,5,7,53,8,7,10,7,12,7,56,9,7,1,8,1,
        8,5,8,60,8,8,10,8,12,8,63,9,8,1,8,1,8,1,8,5,8,68,8,8,10,8,12,8,71,
        9,8,1,8,3,8,74,8,8,1,9,1,9,5,9,78,8,9,10,9,12,9,81,9,9,1,10,4,10,
        84,8,10,11,10,12,10,85,1,11,4,11,89,8,11,11,11,12,11,90,1,11,1,11,
        0,0,12,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
        1,0,6,4,0,58,58,65,90,95,95,97,122,5,0,45,46,48,58,65,90,95,95,97,
        122,1,0,34,34,1,0,39,39,1,0,60,60,3,0,9,10,13,13,32,32,100,0,1,1,
        0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
        0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,
        0,0,23,1,0,0,0,1,25,1,0,0,0,3,32,1,0,0,0,5,38,1,0,0,0,7,40,1,0,0,
        0,9,42,1,0,0,0,11,44,1,0,0,0,13,47,1,0,0,0,15,50,1,0,0,0,17,73,1,
        0,0,0,19,75,1,0,0,0,21,83,1,0,0,0,23,88,1,0,0,0,25,26,5,115,0,0,
        26,27,5,99,0,0,27,28,5,114,0,0,28,29,5,105,0,0,29,30,5,112,0,0,30,
        31,5,116,0,0,31,2,1,0,0,0,32,33,5,115,0,0,33,34,5,116,0,0,34,35,
        5,121,0,0,35,36,5,108,0,0,36,37,5,101,0,0,37,4,1,0,0,0,38,39,5,61,
        0,0,39,6,1,0,0,0,40,41,5,60,0,0,41,8,1,0,0,0,42,43,5,62,0,0,43,10,
        1,0,0,0,44,45,5,60,0,0,45,46,5,47,0,0,46,12,1,0,0,0,47,48,5,47,0,
        0,48,49,5,62,0,0,49,14,1,0,0,0,50,54,7,0,0,0,51,53,7,1,0,0,52,51,
        1,0,0,0,53,56,1,0,0,0,54,52,1,0,0,0,54,55,1,0,0,0,55,16,1,0,0,0,
        56,54,1,0,0,0,57,61,5,34,0,0,58,60,8,2,0,0,59,58,1,0,0,0,60,63,1,
        0,0,0,61,59,1,0,0,0,61,62,1,0,0,0,62,64,1,0,0,0,63,61,1,0,0,0,64,
        74,5,34,0,0,65,69,5,39,0,0,66,68,8,3,0,0,67,66,1,0,0,0,68,71,1,0,
        0,0,69,67,1,0,0,0,69,70,1,0,0,0,70,72,1,0,0,0,71,69,1,0,0,0,72,74,
        5,39,0,0,73,57,1,0,0,0,73,65,1,0,0,0,74,18,1,0,0,0,75,79,7,0,0,0,
        76,78,7,1,0,0,77,76,1,0,0,0,78,81,1,0,0,0,79,77,1,0,0,0,79,80,1,
        0,0,0,80,20,1,0,0,0,81,79,1,0,0,0,82,84,8,4,0,0,83,82,1,0,0,0,84,
        85,1,0,0,0,85,83,1,0,0,0,85,86,1,0,0,0,86,22,1,0,0,0,87,89,7,5,0,
        0,88,87,1,0,0,0,89,90,1,0,0,0,90,88,1,0,0,0,90,91,1,0,0,0,91,92,
        1,0,0,0,92,93,6,11,0,0,93,24,1,0,0,0,8,0,54,61,69,73,79,85,90,1,
        6,0,0
    ]

class HTMLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    TAG_OPEN = 4
    TAG_CLOSE = 5
    TAG_OPEN_SLASH = 6
    TAG_SLASH_CLOSE = 7
    ATTRIBUTE_NAME = 8
    ATTRIBUTE_VALUE = 9
    TAG_NAME = 10
    TEXT = 11
    WS = 12

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'script'", "'style'", "'='", "'<'", "'>'", "'</'", "'/>'" ]

    symbolicNames = [ "<INVALID>",
            "TAG_OPEN", "TAG_CLOSE", "TAG_OPEN_SLASH", "TAG_SLASH_CLOSE", 
            "ATTRIBUTE_NAME", "ATTRIBUTE_VALUE", "TAG_NAME", "TEXT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "TAG_OPEN", "TAG_CLOSE", "TAG_OPEN_SLASH", 
                  "TAG_SLASH_CLOSE", "ATTRIBUTE_NAME", "ATTRIBUTE_VALUE", 
                  "TAG_NAME", "TEXT", "WS" ]

    grammarFileName = "HTML.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


