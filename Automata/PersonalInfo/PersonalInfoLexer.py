# Generated from PersonalInfo.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,17,114,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,1,0,1,0,1,0,1,0,1,1,1,1,1,
        1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,
        5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,
        9,1,10,1,10,1,10,1,10,1,11,1,11,1,12,4,12,98,8,12,11,12,12,12,99,
        1,13,1,13,1,14,1,14,1,15,1,15,1,16,4,16,109,8,16,11,16,12,16,110,
        1,16,1,16,0,0,17,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,31,16,33,17,1,0,3,2,0,65,90,97,122,1,
        0,48,57,3,0,9,10,13,13,32,32,115,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
        0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
        0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
        0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,1,35,1,0,0,
        0,3,39,1,0,0,0,5,44,1,0,0,0,7,61,1,0,0,0,9,65,1,0,0,0,11,69,1,0,
        0,0,13,74,1,0,0,0,15,78,1,0,0,0,17,82,1,0,0,0,19,86,1,0,0,0,21,90,
        1,0,0,0,23,94,1,0,0,0,25,97,1,0,0,0,27,101,1,0,0,0,29,103,1,0,0,
        0,31,105,1,0,0,0,33,108,1,0,0,0,35,36,5,97,0,0,36,37,5,110,0,0,37,
        38,5,100,0,0,38,2,1,0,0,0,39,40,5,119,0,0,40,41,5,105,0,0,41,42,
        5,116,0,0,42,43,5,104,0,0,43,4,1,0,0,0,44,45,5,116,0,0,45,46,5,101,
        0,0,46,47,5,108,0,0,47,48,5,101,0,0,48,49,5,112,0,0,49,50,5,104,
        0,0,50,51,5,111,0,0,51,52,5,110,0,0,52,53,5,101,0,0,53,54,5,32,0,
        0,54,55,5,110,0,0,55,56,5,117,0,0,56,57,5,109,0,0,57,58,5,98,0,0,
        58,59,5,101,0,0,59,60,5,114,0,0,60,6,1,0,0,0,61,62,5,101,0,0,62,
        63,5,120,0,0,63,64,5,116,0,0,64,8,1,0,0,0,65,66,5,77,0,0,66,67,5,
        114,0,0,67,68,5,46,0,0,68,10,1,0,0,0,69,70,5,77,0,0,70,71,5,114,
        0,0,71,72,5,115,0,0,72,73,5,46,0,0,73,12,1,0,0,0,74,75,5,77,0,0,
        75,76,5,115,0,0,76,77,5,46,0,0,77,14,1,0,0,0,78,79,5,68,0,0,79,80,
        5,114,0,0,80,81,5,46,0,0,81,16,1,0,0,0,82,83,5,74,0,0,83,84,5,114,
        0,0,84,85,5,46,0,0,85,18,1,0,0,0,86,87,5,83,0,0,87,88,5,114,0,0,
        88,89,5,46,0,0,89,20,1,0,0,0,90,91,5,73,0,0,91,92,5,73,0,0,92,93,
        5,73,0,0,93,22,1,0,0,0,94,95,5,58,0,0,95,24,1,0,0,0,96,98,7,0,0,
        0,97,96,1,0,0,0,98,99,1,0,0,0,99,97,1,0,0,0,99,100,1,0,0,0,100,26,
        1,0,0,0,101,102,7,1,0,0,102,28,1,0,0,0,103,104,5,45,0,0,104,30,1,
        0,0,0,105,106,5,32,0,0,106,32,1,0,0,0,107,109,7,2,0,0,108,107,1,
        0,0,0,109,110,1,0,0,0,110,108,1,0,0,0,110,111,1,0,0,0,111,112,1,
        0,0,0,112,113,6,16,0,0,113,34,1,0,0,0,3,0,99,110,1,6,0,0
    ]

class PersonalInfoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    COLON = 12
    WORD = 13
    DIGIT = 14
    DASH = 15
    SPACE = 16
    WS = 17

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'and'", "'with'", "'telephone number'", "'ext'", "'Mr.'", "'Mrs.'", 
            "'Ms.'", "'Dr.'", "'Jr.'", "'Sr.'", "'III'", "':'", "'-'", "' '" ]

    symbolicNames = [ "<INVALID>",
            "COLON", "WORD", "DIGIT", "DASH", "SPACE", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "COLON", "WORD", "DIGIT", 
                  "DASH", "SPACE", "WS" ]

    grammarFileName = "PersonalInfo.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


